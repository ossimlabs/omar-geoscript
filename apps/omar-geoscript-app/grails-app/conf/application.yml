info:
  app:
    name: '@info.app.name@'
    version: '@info.app.version@'
    grailsVersion: '@info.app.grailsVersion@'

dataSource:
  driverClassName: org.postgresql.Driver
  username: ${omarDb.username}
  password: ${omarDb.password}
  pooled: true
  jmxExport: true

environments:
  development:
    dataSource:
      dbCreate: create-drop
      url: jdbc:postgresql://${omarDb.host}:${omarDb.port}/${omarDb.name}
  test:
    dataSource:
      dbCreate: update
      url: jdbc:postgresql://${omarDb.host}:${omarDb.port}/${omarDb.name}
  production:
    dataSource:
      dbCreate: none
      url: jdbc:postgresql://${omarDb.host}:${omarDb.port}/${omarDb.name}
      properties:
        jmxEnabled: true
        initialSize: 5
        maxActive: 50
        minIdle: 5
        maxIdle: 25
        maxWait: 10000
        maxAge: 600000
        timeBetweenEvictionRunsMillis: 5000
        minEvictableIdleTimeMillis: 60000
        validationQuery: SELECT 1
        validationQueryTimeout: 3
        validationInterval: 15000
        testOnBorrow: true
        testWhileIdle: true
        testOnReturn: false
        jdbcInterceptors: ConnectionState
        defaultTransactionIsolation: 2 # TRANSACTION_READ_COMMITTED

grails:
  gorm:
    reactor:
      events: false
  mime:
    disable:
      accept:
        header:
          userAgents:
            - Gecko
            - WebKit
            - Presto
            - Trident
    types:
      all: '*/*'
      atom: application/atom+xml
      css: text/css
      csv: text/csv
      form: application/x-www-form-urlencoded
      html:
        - text/html
        - application/xhtml+xml
      js: text/javascript
      json:
        - application/json
        - text/json
      multipartForm: multipart/form-data
      pdf: application/pdf
      rss: application/rss+xml
      text: text/plain
      hal:
        - application/hal+json
        - application/hal+xml
      xml:
        - text/xml
        - application/xml
  views:
    gsp:
      encoding: UTF-8
      htmlcodec: xml
      codecs:
        expression: html
        scriptlet: html
        taglib: none
        staticparts: none
    default:
      codec: html
hibernate:
  hbm2ddl:
    auto: update
  cache:
    queries: false
    use_second_level_cache: false
    use_query_cache: false
  dialect: 'org.hibernate.spatial.dialect.postgis.PostgisDialect'
---
grails:
  cors:
    enabled: true
  resources:
    pattern: '/**'
  plugin:
    console:
      enabled: true
      csrfProtection:
        enabled: false

server:
  port: 8080
  servlet:
    context-path: /omar-geoscript
management:
  endpoints:
    enabled-by-default: true
    web:
      base-path: '/actuator'
      exposure:
        include: '*'
environments:
  production:
    spring:
      h2:
        console:
          enabled: true
          settings:
            web-allow-others: true

---
omarDb:
  host: localhost
  port: 5432
  username: postgres  
  password: postgres

environments:
  development:
    omarDb:
      name: omardb-dev
  production:
    omarDb:
      name: omardb-prod
---
wfs:
    datastores:
        - namespaceId: omar
          datastoreId: omar_prod
          datastoreParams:
              dbtype: postgis
              host: ${omarDb.host}
              port: ${omarDb.port}
              database: ${omarDb.name}
              user: ${omarDb.username}
              passwd: ${omarDb.password}
              'Expose primary keys': 'true'
              namespace: http://omar.ossim.org
    featureTypeNamespaces:
        - prefix: omar
          uri: http://omar.ossim.org
    featureTypes:
        - name: raster_entry
          title: raster_entry
          description: ''
          keywords:
              - omar
              - raster_entry
              - features
          datastoreId: omar_prod
        - name: video_data_set
          title: video_data_set
          description: ''
          keywords:
              - omar
              - video_data_set
              - features
          datastoreId: omar_prod
wms:
    styles:
        byFileType:
            cadrg:
                filter: file_type='cadrg'
                color:
                    r: 0
                    g: 255
                    b: 255
                    a: 255
            jpeg:
                filter: file_type='jpeg'
                color:
                    r: 255
                    g: 255
                    b: 0
                    a: 255
            unspecified:
                filter: file_type='unspecified'
                color: white
        bySensorType:
            'MISSION_ID_1':
                filter: mission_id='MISSION_ID_1'
                color:
                    r: 255
                    g: 0
                    b: 0
                    a: 255
            'MISSION_ID_2':
                filter: mission_id='MISSION_ID_2'
                color:
                    r: 255
                    g: 0
                    b: 0
                    a: 255
        byVideoType:
            mpeg:
                filter: filename like '%mpg'
                color:
                    r: 255
                    g: 0
                    b: 0
                    a: 255

geoscript:
    export:
        # List of fields to exclude (from raster_entry table) during the shapefile export.
        # This is needed because of the limitation of the column sizes in the outpuft .dbf
        # file.  They only support 10 character column names.
        excludes:
          - 'country_code_tag_id'
          - 'file_type_tag_id'
          - 'mission_id_tag_id'
          - 'product_id_tag_id'
          - 'sensor_id_tag_id'
          - 'target_id_tag_id'
# Define the http protocols that swagger will use
swagger:
  schemes:
    - HTTPS
    - HTTP