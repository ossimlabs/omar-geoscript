---
grails:
    profile: web
    codegen:
        defaultPackage: omar.geoscript.app
    gorm:
        reactor:
            # Whether to translate GORM events into Reactor events
            # Disabled by default for performance reasons
            events: false
info:
    app:
        name: '@info.app.name@'
        version: '@info.app.version@'
        grailsVersion: '@info.app.grailsVersion@'
spring:
    jmx:
        unique-names: true
    main:
        banner-mode: "off"
    groovy:
        template:
            check-template-location: false
    devtools:
        restart:
            additional-exclude:
                - '*.gsp'
                - '**/*.gsp'
                - '*.gson'
                - '**/*.gson'
                - 'logback.xml'
                - '*.properties'
management:
    endpoints:
        enabled-by-default: false

---
grails:
    mime:
        disable:
            accept:
                header:
                    userAgents:
                        - Gecko
                        - WebKit
                        - Presto
                        - Trident
        types:
            all: '*/*'
            atom: application/atom+xml
            css: text/css
            csv: text/csv
            form: application/x-www-form-urlencoded
            html:
              - text/html
              - application/xhtml+xml
            js: text/javascript
            json:
              - application/json
              - text/json
            multipartForm: multipart/form-data
            pdf: application/pdf
            rss: application/rss+xml
            text: text/plain
            hal:
              - application/hal+json
              - application/hal+xml
            xml:
              - text/xml
              - application/xml
    urlmapping:
        cache:
            maxsize: 1000
    controllers:
        defaultScope: singleton
    converters:
        encoding: UTF-8
    views:
        default:
            codec: html
        gsp:
            encoding: UTF-8
            htmlcodec: xml
            codecs:
                expression: html
                scriptlet: html
                taglib: none
                staticparts: none
management:
    endpoints:
        jmx:
            unique-names: true

---
hibernate:
    cache:
        queries: false
        use_second_level_cache: false
        use_query_cache: false
    dialect: 'org.hibernate.spatial.dialect.postgis.PostgisDialect'

dataSource:
    pooled: true
    jmxExport: true
    driverClassName: org.postgresql.Driver
    username: postgres
    password: ${omarDb.password}
    
environments:
    development:
        dataSource:
            dbCreate: update
            url: jdbc:postgresql:omardb-dev
    test:
        dataSource:
            dbCreate: update
            url: jdbc:postgresql:omardb-test
    production:
        dataSource:
            dbCreate: update
            url: ${omarDb.url}
            properties:
                jmxEnabled: true
                initialSize: 5
                maxActive: 50
                minIdle: 5
                maxIdle: 25
                maxWait: 10000
                maxAge: 600000
                timeBetweenEvictionRunsMillis: 5000
                minEvictableIdleTimeMillis: 60000
                validationQuery: SELECT 1
                validationQueryTimeout: 3
                validationInterval: 15000
                testOnBorrow: true
                testWhileIdle: true
                testOnReturn: false
                jdbcInterceptors: ConnectionState
                defaultTransactionIsolation: 2 # TRANSACTION_READ_COMMITTED
---
server:
    servlet:
        context-path: /omar-geoscript
    contextPath: ${server.servlet.context-path}

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    env:
      enabled: true
      sensitive: false
    health:
      enabled: true
    
grails:
    cors:
        enabled: true
    resources:
        pattern: '/**'
    servlet:
        version: 3.0
---
spring:
  application:
    name: omar-geoscript
  cloud:
    discovery:
      enabled: ${SPRING_CLOUD_DISCOVERY_ENABLED:false}
    service-registry:
      auto-registration:
        enabled: ${spring.cloud.discovery.enabled}

eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_URI:http://omar-eureka-server:8761/omar-eureka-server/eureka}
  instance:
    preferIpAddress: true
---
wfs:
    datastores:
        - namespaceId: omar
          datastoreId: omar_prod
          datastoreParams:
              dbtype: postgis
              host: ${omarDb.host}
              port: ${omarDb.port}
              database: ${omarDb.name}
              user: ${omarDb.username}
              passwd: ${omarDb.password}
              'Expose primary keys': 'true'
              namespace: http://omar.ossim.org
    featureTypeNamespaces:
        - prefix: omar
          uri: http://omar.ossim.org
    featureTypes:
        - name: raster_entry
          title: raster_entry
          description: ''
          keywords:
              - omar
              - raster_entry
              - features
          datastoreId: omar_prod
        - name: video_data_set
          title: video_data_set
          description: ''
          keywords:
              - omar
              - video_data_set
              - features
          datastoreId: omar_prod

wms:
    styles:
        byFileType:
            cadrg:
                filter: file_type='cadrg'
                color:
                    r: 0
                    g: 255
                    b: 255
                    a: 255
            jpeg:
                filter: file_type='jpeg'
                color:
                    r: 255
                    g: 255
                    b: 0
                    a: 255
            unspecified:
                filter: file_type='unspecified'
                color: white
        bySensorType:
            'MISSION_ID_1':
                filter: mission_id='MISSION_ID_1'
                color:
                    r: 255
                    g: 0
                    b: 0
                    a: 255
            'MISSION_ID_2':
                filter: mission_id='MISSION_ID_2'
                color:
                    r: 255
                    g: 0
                    b: 0
                    a: 255
        byVideoType:
            mpeg:
                filter: filename like '%mpg'
                color:
                    r: 255
                    g: 0
                    b: 0
                    a: 255

geoscript:
    export:
        # List of fields to exclude (from raster_entry table) during the shapefile export.
        # This is needed because of the limitation of the column sizes in the outpuft .dbf
        # file.  They only support 10 character column names.
        excludes:
          - 'country_code_tag_id'
          - 'file_type_tag_id'
          - 'mission_id_tag_id'
          - 'product_id_tag_id'
          - 'sensor_id_tag_id'
          - 'target_id_tag_id'
---
grails:
    cors:
      enabled: true
    resources:
        pattern: '/**'
    plugin:
      console:
        enabled: true
        csrfProtection:
            enabled: false

environments:
    production:
        grails:
          dbconsole:
            enabled: true            

# Define the http protocols that swagger will use
swagger:
  schemes:
    - HTTPS
    - HTTP
